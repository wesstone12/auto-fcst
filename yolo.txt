models = {
    'lasso': Lasso(),
    'lasso_cv': LassoCV(),
    'ridge': Ridge(),
    'linear': LinearRegression(),
    'theil_sen': TheilSenRegressor(),
    'ransac': RANSACRegressor(random_state=0),
    'huber': HuberRegressor(),
    'quantile': QuantileRegressor(),
    'knn_5': KNeighborsRegressor(n_neighbors=5),
    'knn_10': KNeighborsRegressor(n_neighbors=10),
    'mlp_100': MLPRegressor(hidden_layer_sizes=(100,), random_state=0),
    'mlp_100_50': MLPRegressor(hidden_layer_sizes=(100,50), random_state=0),
    'rf_100': RandomForestRegressor(n_estimators=100, max_depth=10, random_state=0),
    'rf_200': RandomForestRegressor(n_estimators=200, max_depth=15, random_state=0),
    'gbm_100': GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=0),
    'gbm_200': GradientBoostingRegressor(n_estimators=200, learning_rate=0.05, max_depth=5, random_state=0),
    'extra_trees_100': ExtraTreesRegressor(n_estimators=100, max_depth=10, random_state=0),
    'hist_gbm': HistGradientBoostingRegressor(random_state=0),
    'adaboost_50': AdaBoostRegressor(n_estimators=50, random_state=0),
    'bagging_50': BaggingRegressor(n_estimators=50, random_state=0),
    'svr_linear': SVR(kernel='linear'),
    'svr_rbf': SVR(kernel='rbf'),
    'linear_svr': LinearSVR(),
    'elastic_l1_0.5': ElasticNet(l1_ratio=0.5),
    'elastic_l1_0.7': ElasticNet(l1_ratio=0.7),
    'elastic_cv': ElasticNetCV(),
    'xgb_100': XGBRegressor(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=0),
    'xgb_200': XGBRegressor(n_estimators=200, learning_rate=0.05, max_depth=5, random_state=0),
    'lgb_100': LGBMRegressor(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=0),
    'lgb_200': LGBMRegressor(n_estimators=200, learning_rate=0.05, max_depth=5, random_state=0)
}


'lgb_100': LGBMRegressor(n_estimators=100, learning_rate=0.1, max_depth=3, alpha=0.1, random_state=0),
'lgb_200': LGBMRegressor(n_estimators=200, learning_rate=0.05, max_depth=5, alpha=0.1, random_state=0),
'lgb_100_alpha0': LGBMRegressor(n_estimators=100, learning_rate=0.1, max_depth=3, alpha=0, random_state=0),
'lgb_100_alpha05': LGBMRegressor(n_estimators=100, learning_rate=0.1, max_depth=3, alpha=0.5, random_state=0),
